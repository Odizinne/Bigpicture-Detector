#!/usr/bin/env python3

import subprocess
import time
import re
import atexit
import os
import shutil
import sys
import argparse
import logging

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class Mode:
    def __init__(self, screen_command, audio, mode_name, screen_name):
        self.screen_command = screen_command
        self.audio = audio
        self.mode_name = mode_name
        self.screen_name = screen_name
        self.current_mode = False

    def activate(self):
        logger.info("Activating mode: %s", self.mode_name)
        self.switch_screen()
        self.switch_audio()
        self.current_mode = True

    def deactivate(self):
        self.current_mode = False

    def is_active(self):
        return self.current_mode

    def switch_screen(self):
        logger.info("Switching screen to: %s with command: %s", self.screen_name, self.screen_command)
        subprocess.run(self.screen_command, stdout=subprocess.DEVNULL)

    def switch_audio(self):
        while True:
            result = subprocess.run(['pactl', 'list', 'sinks'], stdout=subprocess.PIPE)
            sinks = result.stdout.decode('utf-8')
            for sink in sinks.split('\n\n'):
                if self.audio in sink:
                    match = re.search(r'Name: (.*)', sink)
                    if match:
                        node_name = match.group(1)
                        logger.info(f"Switching audio to: {node_name}")
                        subprocess.run(['pactl', 'set-default-sink', node_name])
                        return

def load_configuration():
    parser = argparse.ArgumentParser(description='Big Picture Detector')
    parser.add_argument('--gamemode-audio', '-ga', type=str, required=True, help='Audio for game mode')
    parser.add_argument('--desktopmode-audio', '-da', type=str, required=True, help='Audio for desktop mode')
    args = parser.parse_args()

    if not args.gamemode_audio or not args.desktopmode_audio:
        parser.error("Both --gamemode-audio and --desktopmode-audio are required")

    return args

def check_window_names():
    result = subprocess.run(['wmctrl', '-l'], stdout=subprocess.PIPE)
    windows = result.stdout.decode('utf-8')

    keywords = {"steam", "mode", "big", "picture"}

    for line in windows.splitlines():
        parts = line.split(None, 3)
        if len(parts) == 4:
            title = parts[3].lower()
            if all(keyword in title for keyword in keywords):
                return True

    return False

def read_sunshine_status():
    try:
        home_dir = os.path.expanduser("~")
        status_file = os.path.join(home_dir, ".local/share/sunshine_status/status.txt")
        with open(status_file, 'r') as file:
            content = file.read().strip()
            if content == 'true':
                return True
            elif content == 'false':
                return False
    except FileNotFoundError:
        return False

def get_randr_command():
    session_type = os.getenv("XDG_SESSION_TYPE")
    
    if session_type == "x11":
        logger.info("Session type: X11. Using xrandr.")
        return "xrandr"
    elif session_type == "wayland":
        logger.info("Session type: Wayland. Using gnome-randr.")
        return "gnome-randr"
    else:
        logger.error(f"Unsupported session type: {session_type}")
        sys.exit(1)

def validate_commands(commands):
    for command in commands:
        if shutil.which(command) is None:
            logger.error(f"The required command '{command}' is not installed.")
            sys.exit(1)

def get_screens(randr_command):
    result = subprocess.run([randr_command], stdout=subprocess.PIPE)
    output = result.stdout.decode('utf-8')
    internal_screen = None
    external_screen = None

    if randr_command == "xrandr":
        for line in output.splitlines():
            if 'connected' in line and 'disconnected' not in line:
                screen_name = line.split()[0]
                if 'primary' in line:
                    internal_screen = screen_name
                else:
                    external_screen = screen_name
    
    elif randr_command == "gnome-randr":
        adapter_pattern = re.compile(r'Adapter: (\w+-\d+)')
        primary_pattern = re.compile(r'primary: (\w+)')
        
        adapters = adapter_pattern.findall(output)
        
        primary_adapter = None
        for line in output.split('\n'):
            match = primary_pattern.search(line)
            if match:
                if match.group(1) == 'yes':
                    primary_adapter = adapters.pop(0) if adapters else None
                break
        
        internal_screen = primary_adapter
        external_screen = next((x for x in adapters if x != primary_adapter), None)
    
    if internal_screen is None or external_screen is None:
        logger.error("Could not determine internal or external screens.")
        sys.exit(1)
    
    logger.info(f"Internal screen: {internal_screen}")
    logger.info(f"External screen: {external_screen}")
    
    return internal_screen, external_screen

def generate_screen_command(randr_command, output_screen, off_screen):
    return [randr_command, '--output', output_screen, '--auto', '--output', off_screen, '--off']

def main():
    args = load_configuration()

    randr_command = get_randr_command()
    validate_commands(['pactl', 'wmctrl', randr_command])
    
    internal_screen, external_screen = get_screens(randr_command)
    logger.info(f"Game mode audio: {args.gamemode_audio}")
    logger.info(f"Desktop mode audio: {args.desktopmode_audio}")
    
    gamemode = Mode(
        generate_screen_command(randr_command, external_screen, internal_screen),
        args.gamemode_audio,
        "Game Mode",
        external_screen
    )
    desktopmode = Mode(
        generate_screen_command(randr_command, internal_screen, external_screen),
        args.desktopmode_audio,
        "Desktop Mode",
        internal_screen
    )

    atexit.register(desktopmode.activate)
    if check_window_names() and not read_sunshine_status():
        gamemode.activate()
    else:
        desktopmode.current_mode = True

    try:
        while True:
            if check_window_names() and not read_sunshine_status():
                if not gamemode.is_active():
                    gamemode.activate()
                    desktopmode.deactivate()
            else:
                if not desktopmode.is_active():
                    desktopmode.activate()
                    gamemode.deactivate()
            time.sleep(1)
    except KeyboardInterrupt:
        logger.info("Exiting.")

if __name__ == "__main__":
    main()
